generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id               String            @id @default(cuid())
  title            String
  slug             String            @unique
  content          String
  excerpt          String?
  coverImage       String?
  publishedAt      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  author           String?
  tags             String            @default("")
  seoTitle         String?
  seoDescription   String?
  views            Int               @default(0)
  scheduledAt      DateTime?
  status           PostStatus        @default(DRAFT)
  socialLinks      String?
  youtubeVideoId   String?
  originalLanguage String            @default("ko")
  globalRank       Int?
  comments         Comment[]
  translations     PostTranslation[]

  @@index([slug])
  @@index([publishedAt])
  @@index([status, scheduledAt])
  @@index([globalRank])
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Knowledge {
  id        String   @id @default(cuid())
  content   String
  source    String?
  embedding String?
  createdAt DateTime @default(now())
}

model Comment {
  id            String    @id @default(cuid())
  postId        String
  authorName    String
  authorEmail   String?
  content       String
  aiResponse    String?
  aiGeneratedAt DateTime?
  agreeWithUser Int       @default(0)
  agreeWithAI   Int       @default(0)
  isApproved    Boolean   @default(true)
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  parentId      String?
  parent        Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  replies       Comment[] @relation("CommentToComment")
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([createdAt])
  @@index([isApproved, isDeleted])
}

model PostTranslation {
  id             String   @id @default(cuid())
  postId         String
  locale         String
  title          String
  content        String
  excerpt        String?
  seoTitle       String?
  seoDescription String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  coverImage     String?
  post           Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, locale])
  @@index([postId])
  @@index([locale])
}

enum PostStatus {
  DRAFT
  PUBLISHED
}
