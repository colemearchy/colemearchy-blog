import { NextRequest, NextResponse } from 'next/server';
import { MASTER_SYSTEM_PROMPT, generateContentPrompt } from '@/lib/ai-prompts';

export async function POST(request: NextRequest) {
  try {
    const { prompt, keywords, affiliateProducts } = await request.json();

    if (!prompt) {
      return NextResponse.json({ error: 'Prompt is required' }, { status: 400 });
    }

    const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

    if (!GEMINI_API_KEY) {
      return NextResponse.json({ error: 'Gemini API key not configured' }, { status: 500 });
    }

    // Gemini는 시스템 프롬프트를 직접 지원하지 않으므로, 사용자 프롬프트와 결합합니다.
    const fullPrompt = `${MASTER_SYSTEM_PROMPT}\n\n------\n\n**EXECUTE TASK:**\n\n${generateContentPrompt(prompt, keywords, affiliateProducts)}`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: fullPrompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          maxOutputTokens: 8192,
        }
      }),
    });

    if (!response.ok) {
      const errorBody = await response.text();
      console.error('Error from Gemini API:', errorBody);
      return NextResponse.json({ error: 'Failed to generate content from Gemini API', details: errorBody }, { status: response.status });
    }

    const data = await response.json();
    
    if (!data.candidates || data.candidates.length === 0) {
       console.error('No candidates returned from Gemini API:', data);
       return NextResponse.json({ error: 'No content generated by the AI model' }, { status: 500 });
    }
    
    const responseText = data.candidates[0].content.parts[0].text;

    try {
      const parsedContent = JSON.parse(responseText);
      return NextResponse.json(parsedContent);
    } catch {
      return NextResponse.json({ content: responseText });
    }

  } catch (error) {
    console.error('Error in generate-content handler:', error);
    return NextResponse.json({ error: 'Failed to generate content' }, { status: 500 });
  }
}